// Generated by view binder compiler. Do not edit!
package at.fhooe.mc.datadora.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.ToggleButton;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import at.fhooe.mc.datadora.R;
import at.fhooe.mc.datadora.Stack.StackView;
import com.google.android.material.slider.Slider;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityStackBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout StackActivity;

  @NonNull
  public final ImageView StackActivityBoxReturn;

  @NonNull
  public final Button StackActivityButtonClear;

  @NonNull
  public final Button StackActivityButtonEmpty;

  @NonNull
  public final Button StackActivityButtonPeek;

  @NonNull
  public final Button StackActivityButtonPop;

  @NonNull
  public final Button StackActivityButtonPush;

  @NonNull
  public final Button StackActivityButtonRandom;

  @NonNull
  public final Button StackActivityButtonSize;

  @NonNull
  public final TextView StackActivityCurrentValue;

  @NonNull
  public final ImageView StackActivityFlowIcon;

  @NonNull
  public final TextView StackActivityFlowText;

  @NonNull
  public final Guideline StackActivityGuideline;

  @NonNull
  public final Slider StackActivityInputSlider;

  @NonNull
  public final TextView StackActivityInputValue;

  @NonNull
  public final ImageView StackActivityLine;

  @NonNull
  public final TextView StackActivityReturnText;

  @NonNull
  public final TextView StackActivityReturnValue;

  @NonNull
  public final ScrollView StackActivityScrollViewButtons;

  @NonNull
  public final StackView StackActivityStackView;

  @NonNull
  public final ToggleButton StackActivitySwitch;

  @NonNull
  public final Toolbar StackActivityToolbar;

  @NonNull
  public final FrameLayout StackActivityViewContainer;

  private ActivityStackBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout StackActivity, @NonNull ImageView StackActivityBoxReturn,
      @NonNull Button StackActivityButtonClear, @NonNull Button StackActivityButtonEmpty,
      @NonNull Button StackActivityButtonPeek, @NonNull Button StackActivityButtonPop,
      @NonNull Button StackActivityButtonPush, @NonNull Button StackActivityButtonRandom,
      @NonNull Button StackActivityButtonSize, @NonNull TextView StackActivityCurrentValue,
      @NonNull ImageView StackActivityFlowIcon, @NonNull TextView StackActivityFlowText,
      @NonNull Guideline StackActivityGuideline, @NonNull Slider StackActivityInputSlider,
      @NonNull TextView StackActivityInputValue, @NonNull ImageView StackActivityLine,
      @NonNull TextView StackActivityReturnText, @NonNull TextView StackActivityReturnValue,
      @NonNull ScrollView StackActivityScrollViewButtons, @NonNull StackView StackActivityStackView,
      @NonNull ToggleButton StackActivitySwitch, @NonNull Toolbar StackActivityToolbar,
      @NonNull FrameLayout StackActivityViewContainer) {
    this.rootView = rootView;
    this.StackActivity = StackActivity;
    this.StackActivityBoxReturn = StackActivityBoxReturn;
    this.StackActivityButtonClear = StackActivityButtonClear;
    this.StackActivityButtonEmpty = StackActivityButtonEmpty;
    this.StackActivityButtonPeek = StackActivityButtonPeek;
    this.StackActivityButtonPop = StackActivityButtonPop;
    this.StackActivityButtonPush = StackActivityButtonPush;
    this.StackActivityButtonRandom = StackActivityButtonRandom;
    this.StackActivityButtonSize = StackActivityButtonSize;
    this.StackActivityCurrentValue = StackActivityCurrentValue;
    this.StackActivityFlowIcon = StackActivityFlowIcon;
    this.StackActivityFlowText = StackActivityFlowText;
    this.StackActivityGuideline = StackActivityGuideline;
    this.StackActivityInputSlider = StackActivityInputSlider;
    this.StackActivityInputValue = StackActivityInputValue;
    this.StackActivityLine = StackActivityLine;
    this.StackActivityReturnText = StackActivityReturnText;
    this.StackActivityReturnValue = StackActivityReturnValue;
    this.StackActivityScrollViewButtons = StackActivityScrollViewButtons;
    this.StackActivityStackView = StackActivityStackView;
    this.StackActivitySwitch = StackActivitySwitch;
    this.StackActivityToolbar = StackActivityToolbar;
    this.StackActivityViewContainer = StackActivityViewContainer;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityStackBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityStackBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_stack, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityStackBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout StackActivity = (ConstraintLayout) rootView;

      id = R.id.Stack_Activity_Box_Return;
      ImageView StackActivityBoxReturn = rootView.findViewById(id);
      if (StackActivityBoxReturn == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_Button_Clear;
      Button StackActivityButtonClear = rootView.findViewById(id);
      if (StackActivityButtonClear == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_Button_Empty;
      Button StackActivityButtonEmpty = rootView.findViewById(id);
      if (StackActivityButtonEmpty == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_Button_Peek;
      Button StackActivityButtonPeek = rootView.findViewById(id);
      if (StackActivityButtonPeek == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_Button_Pop;
      Button StackActivityButtonPop = rootView.findViewById(id);
      if (StackActivityButtonPop == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_Button_Push;
      Button StackActivityButtonPush = rootView.findViewById(id);
      if (StackActivityButtonPush == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_Button_Random;
      Button StackActivityButtonRandom = rootView.findViewById(id);
      if (StackActivityButtonRandom == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_Button_Size;
      Button StackActivityButtonSize = rootView.findViewById(id);
      if (StackActivityButtonSize == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_CurrentValue;
      TextView StackActivityCurrentValue = rootView.findViewById(id);
      if (StackActivityCurrentValue == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_FlowIcon;
      ImageView StackActivityFlowIcon = rootView.findViewById(id);
      if (StackActivityFlowIcon == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_FlowText;
      TextView StackActivityFlowText = rootView.findViewById(id);
      if (StackActivityFlowText == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_Guideline;
      Guideline StackActivityGuideline = rootView.findViewById(id);
      if (StackActivityGuideline == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_InputSlider;
      Slider StackActivityInputSlider = rootView.findViewById(id);
      if (StackActivityInputSlider == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_InputValue;
      TextView StackActivityInputValue = rootView.findViewById(id);
      if (StackActivityInputValue == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_Line;
      ImageView StackActivityLine = rootView.findViewById(id);
      if (StackActivityLine == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_ReturnText;
      TextView StackActivityReturnText = rootView.findViewById(id);
      if (StackActivityReturnText == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_ReturnValue;
      TextView StackActivityReturnValue = rootView.findViewById(id);
      if (StackActivityReturnValue == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_ScrollViewButtons;
      ScrollView StackActivityScrollViewButtons = rootView.findViewById(id);
      if (StackActivityScrollViewButtons == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_StackView;
      StackView StackActivityStackView = rootView.findViewById(id);
      if (StackActivityStackView == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_Switch;
      ToggleButton StackActivitySwitch = rootView.findViewById(id);
      if (StackActivitySwitch == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_Toolbar;
      Toolbar StackActivityToolbar = rootView.findViewById(id);
      if (StackActivityToolbar == null) {
        break missingId;
      }

      id = R.id.Stack_Activity_ViewContainer;
      FrameLayout StackActivityViewContainer = rootView.findViewById(id);
      if (StackActivityViewContainer == null) {
        break missingId;
      }

      return new ActivityStackBinding((ConstraintLayout) rootView, StackActivity,
          StackActivityBoxReturn, StackActivityButtonClear, StackActivityButtonEmpty,
          StackActivityButtonPeek, StackActivityButtonPop, StackActivityButtonPush,
          StackActivityButtonRandom, StackActivityButtonSize, StackActivityCurrentValue,
          StackActivityFlowIcon, StackActivityFlowText, StackActivityGuideline,
          StackActivityInputSlider, StackActivityInputValue, StackActivityLine,
          StackActivityReturnText, StackActivityReturnValue, StackActivityScrollViewButtons,
          StackActivityStackView, StackActivitySwitch, StackActivityToolbar,
          StackActivityViewContainer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
