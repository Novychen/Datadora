// Generated by view binder compiler. Do not edit!
package at.fhooe.mc.datadora.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewpager2.widget.ViewPager2;
import at.fhooe.mc.datadora.BinarySearchTree.BSTView;
import at.fhooe.mc.datadora.BinarySearchTree.VerticalSeekBar;
import at.fhooe.mc.datadora.R;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.slider.Slider;
import com.google.android.material.tabs.TabLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityBinarySearchTreeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   *   <li>layout-port/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final ImageView BSTActivityBoxReturn;

  @NonNull
  public final ChipGroup BSTActivityChipGroup;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   *   <li>layout-port/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView BSTActivityCurrentValue;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   *   <li>layout-port/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final ImageView BSTActivityFlowIcon;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   *   <li>layout-port/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView BSTActivityFlowText;

  @NonNull
  public final Guideline BSTActivityGuidelineHor;

  @NonNull
  public final Guideline BSTActivityGuidelineVer;

  @NonNull
  public final Chip BSTActivityInorder;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   *   <li>layout-port/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final Slider BSTActivityInputSlider;

  @NonNull
  public final TextView BSTActivityInputValue;

  @NonNull
  public final Chip BSTActivityPostorder;

  @NonNull
  public final Chip BSTActivityPreorder;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   *   <li>layout-port/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView BSTActivityReturnText;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   *   <li>layout-port/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView BSTActivityReturnValue;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   *   <li>layout-port/</li>
   * </ul>
   */
  @Nullable
  public final VerticalSeekBar BSTActivitySeekBar;

  @NonNull
  public final TabLayout BSTActivityTabLayout;

  @NonNull
  public final Toolbar BSTActivityToolbar;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   *   <li>layout-port/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView BSTActivityVectorOutput;

  @NonNull
  public final BSTView BSTActivityView;

  @NonNull
  public final ViewPager2 BSTActivityViewPager;

  private ActivityBinarySearchTreeBinding(@NonNull ConstraintLayout rootView,
      @Nullable ImageView BSTActivityBoxReturn, @NonNull ChipGroup BSTActivityChipGroup,
      @Nullable TextView BSTActivityCurrentValue, @Nullable ImageView BSTActivityFlowIcon,
      @Nullable TextView BSTActivityFlowText, @NonNull Guideline BSTActivityGuidelineHor,
      @NonNull Guideline BSTActivityGuidelineVer, @NonNull Chip BSTActivityInorder,
      @Nullable Slider BSTActivityInputSlider, @NonNull TextView BSTActivityInputValue,
      @NonNull Chip BSTActivityPostorder, @NonNull Chip BSTActivityPreorder,
      @Nullable TextView BSTActivityReturnText, @Nullable TextView BSTActivityReturnValue,
      @Nullable VerticalSeekBar BSTActivitySeekBar, @NonNull TabLayout BSTActivityTabLayout,
      @NonNull Toolbar BSTActivityToolbar, @Nullable TextView BSTActivityVectorOutput,
      @NonNull BSTView BSTActivityView, @NonNull ViewPager2 BSTActivityViewPager) {
    this.rootView = rootView;
    this.BSTActivityBoxReturn = BSTActivityBoxReturn;
    this.BSTActivityChipGroup = BSTActivityChipGroup;
    this.BSTActivityCurrentValue = BSTActivityCurrentValue;
    this.BSTActivityFlowIcon = BSTActivityFlowIcon;
    this.BSTActivityFlowText = BSTActivityFlowText;
    this.BSTActivityGuidelineHor = BSTActivityGuidelineHor;
    this.BSTActivityGuidelineVer = BSTActivityGuidelineVer;
    this.BSTActivityInorder = BSTActivityInorder;
    this.BSTActivityInputSlider = BSTActivityInputSlider;
    this.BSTActivityInputValue = BSTActivityInputValue;
    this.BSTActivityPostorder = BSTActivityPostorder;
    this.BSTActivityPreorder = BSTActivityPreorder;
    this.BSTActivityReturnText = BSTActivityReturnText;
    this.BSTActivityReturnValue = BSTActivityReturnValue;
    this.BSTActivitySeekBar = BSTActivitySeekBar;
    this.BSTActivityTabLayout = BSTActivityTabLayout;
    this.BSTActivityToolbar = BSTActivityToolbar;
    this.BSTActivityVectorOutput = BSTActivityVectorOutput;
    this.BSTActivityView = BSTActivityView;
    this.BSTActivityViewPager = BSTActivityViewPager;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBinarySearchTreeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBinarySearchTreeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_binary_search_tree, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBinarySearchTreeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.BST_Activity_Box_Return;
      ImageView BSTActivityBoxReturn = rootView.findViewById(id);

      id = R.id.BST_Activity_ChipGroup;
      ChipGroup BSTActivityChipGroup = rootView.findViewById(id);
      if (BSTActivityChipGroup == null) {
        break missingId;
      }

      id = R.id.BST_Activity_CurrentValue;
      TextView BSTActivityCurrentValue = rootView.findViewById(id);

      id = R.id.BST_Activity_FlowIcon;
      ImageView BSTActivityFlowIcon = rootView.findViewById(id);

      id = R.id.BST_Activity_FlowText;
      TextView BSTActivityFlowText = rootView.findViewById(id);

      id = R.id.BST_Activity_Guideline_Hor;
      Guideline BSTActivityGuidelineHor = rootView.findViewById(id);
      if (BSTActivityGuidelineHor == null) {
        break missingId;
      }

      id = R.id.BST_Activity_Guideline_Ver;
      Guideline BSTActivityGuidelineVer = rootView.findViewById(id);
      if (BSTActivityGuidelineVer == null) {
        break missingId;
      }

      id = R.id.BST_Activity_Inorder;
      Chip BSTActivityInorder = rootView.findViewById(id);
      if (BSTActivityInorder == null) {
        break missingId;
      }

      id = R.id.BST_Activity_InputSlider;
      Slider BSTActivityInputSlider = rootView.findViewById(id);

      id = R.id.BST_Activity_InputValue;
      TextView BSTActivityInputValue = rootView.findViewById(id);
      if (BSTActivityInputValue == null) {
        break missingId;
      }

      id = R.id.BST_Activity_Postorder;
      Chip BSTActivityPostorder = rootView.findViewById(id);
      if (BSTActivityPostorder == null) {
        break missingId;
      }

      id = R.id.BST_Activity_Preorder;
      Chip BSTActivityPreorder = rootView.findViewById(id);
      if (BSTActivityPreorder == null) {
        break missingId;
      }

      id = R.id.BST_Activity_ReturnText;
      TextView BSTActivityReturnText = rootView.findViewById(id);

      id = R.id.BST_Activity_ReturnValue;
      TextView BSTActivityReturnValue = rootView.findViewById(id);

      id = R.id.BST_Activity_SeekBar;
      VerticalSeekBar BSTActivitySeekBar = rootView.findViewById(id);

      id = R.id.BST_Activity_TabLayout;
      TabLayout BSTActivityTabLayout = rootView.findViewById(id);
      if (BSTActivityTabLayout == null) {
        break missingId;
      }

      id = R.id.BST_Activity_Toolbar;
      Toolbar BSTActivityToolbar = rootView.findViewById(id);
      if (BSTActivityToolbar == null) {
        break missingId;
      }

      id = R.id.BST_Activity_Vector_Output;
      TextView BSTActivityVectorOutput = rootView.findViewById(id);

      id = R.id.BST_Activity_View;
      BSTView BSTActivityView = rootView.findViewById(id);
      if (BSTActivityView == null) {
        break missingId;
      }

      id = R.id.BST_Activity_ViewPager;
      ViewPager2 BSTActivityViewPager = rootView.findViewById(id);
      if (BSTActivityViewPager == null) {
        break missingId;
      }

      return new ActivityBinarySearchTreeBinding((ConstraintLayout) rootView, BSTActivityBoxReturn,
          BSTActivityChipGroup, BSTActivityCurrentValue, BSTActivityFlowIcon, BSTActivityFlowText,
          BSTActivityGuidelineHor, BSTActivityGuidelineVer, BSTActivityInorder,
          BSTActivityInputSlider, BSTActivityInputValue, BSTActivityPostorder, BSTActivityPreorder,
          BSTActivityReturnText, BSTActivityReturnValue, BSTActivitySeekBar, BSTActivityTabLayout,
          BSTActivityToolbar, BSTActivityVectorOutput, BSTActivityView, BSTActivityViewPager);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
